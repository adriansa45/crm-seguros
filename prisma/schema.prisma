generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model cities {
  city_id       Int             @id @default(autoincrement())
  state_id      Int
  name          String          @db.VarChar(100)
  states        states          @relation(fields: [state_id], references: [state_id], onDelete: NoAction, onUpdate: NoAction)
  neighborhoods neighborhoods[]
}

model neighborhoods {
  neighborhood_id Int         @id @default(autoincrement())
  city_id         Int
  name            String      @db.VarChar(100)
  zipcode         String      @db.VarChar(5)
  customers       customers[]
  cities          cities      @relation(fields: [city_id], references: [city_id], onDelete: NoAction, onUpdate: NoAction)
}

model states {
  state_id Int      @id @default(autoincrement())
  code     String   @db.VarChar(5)
  name     String   @db.VarChar(32)
  cities   cities[]
}

model affiliates {
  affiliate_id Int         @id @default(autoincrement())
  name         String      @db.VarChar(50)
  activated    Boolean?    @default(true)
  customers    customers[]
}

model banks {
  bank_id   Int         @id @default(autoincrement())
  name      String      @db.VarChar(50)
  activated Boolean?    @default(true)
  customers customers[]
}

model credits {
  credit_id   Int        @id @default(autoincrement())
  customer_id Int?
  lapse       Int        @db.SmallInt
  amount      Decimal    @db.Decimal
  rate        Decimal    @db.Decimal
  auth_date   DateTime?  @db.Date
  auth_code   String?    @db.VarChar
  start_date  DateTime?   @default(dbgenerated("CURRENT_DATE")) @db.Date
  end_date    DateTime?   @db.Date
  created     DateTime?  @default(now()) @db.Timestamp(6)
  customers   customers? @relation(fields: [customer_id], references: [customer_id], onDelete: NoAction, onUpdate: NoAction)
}

model customers {
  customer_id        Int                  @id @default(autoincrement())
  user_id            Int
  name               String               @db.VarChar(100)
  last_name          String               @db.VarChar(100)
  phone_number       String               @db.VarChar(12)
  neighborhood_id    Int
  address            String               @db.VarChar(100)
  payroll_id         Int
  bank_id            Int
  affiliate_id       Int
  created            DateTime?            @default(now()) @db.Timestamp(6)
  credits            credits[]
  affiliates         affiliates           @relation(fields: [affiliate_id], references: [affiliate_id], onDelete: NoAction, onUpdate: NoAction, map: "customers_affiliates_fkey")
  banks              banks                @relation(fields: [bank_id], references: [bank_id], onDelete: NoAction, onUpdate: NoAction)
  neighborhoods      neighborhoods        @relation(fields: [neighborhood_id], references: [neighborhood_id], onDelete: NoAction, onUpdate: NoAction)
  payrolls           payrolls             @relation(fields: [payroll_id], references: [payroll_id], onDelete: NoAction, onUpdate: NoAction)
  users              users                @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  reference_contacts reference_contacts[]
}

model payrolls {
  payroll_id Int         @id @default(autoincrement())
  name       String      @db.VarChar(50)
  activated  Boolean?    @default(true)
  customers  customers[]
}

model reference_contacts {
  reference_contact_id Int        @id @default(autoincrement())
  customer_id          Int?
  name                 String     @db.VarChar(100)
  last_name            String     @db.VarChar(100)
  phone_number         String     @db.VarChar(12)
  created              DateTime?  @default(now()) @db.Timestamp(6)
  customers            customers? @relation(fields: [customer_id], references: [customer_id], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  user_id   Int         @id @default(autoincrement())
  name      String      @db.VarChar(64)
  password  String
  active    Boolean?    @default(true)
  customers customers[]
}
